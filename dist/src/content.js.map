{"version":3,"sources":["utils.js","content.js"],"names":["DEBUG","console","log","FILTER_LIST","getMemory","window","performance","memory","setTimeout","isValidHttpUrl","string","url","URL","protocol","_err","promiseSome","arr","predicate","v","arrCopy","slice","length","Promise","arrWithIDs","map","promise","idx","then","op","result","className","includes","catch","race","soon","splice","clasifyImage","image","__isNSFW","__isChecked","src","style","visibility","analyzeImage","match","clearTimeout","__fullRawImageTimer","message","srcUrl","Object","values","dataset","lazyUrls","location","origin","filter","Boolean","chrome","runtime","sendMessage","response","lastError","__reconectCount","__reconectTimer","err","callback","mutationsList","__observer","mutation","target","tagName","images","getElementsByTagName","i","observer","MutationObserver","document","readyState","observe","subtree","attributes","childList"],"mappings":"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","file":"content.js","sourceRoot":"../../src","sourcesContent":["'use strict'\n\n// Set DEBUG to true to start logging in the console\nexport const DEBUG = false\nif (!DEBUG) {\n  console.log = () => {}\n}\n\n// the image classes that needs to be filtered\nexport const FILTER_LIST = ['Hentai', 'Porn', 'Sexy']\n\nconst getMemory = () => {\n  if (!DEBUG) return\n\n  console.log(window.performance.memory)\n  setTimeout(() => { getMemory() }, 7000)\n}\ngetMemory()\n\nexport const isValidHttpUrl = (string) => {\n  try {\n    const url = new URL(string)\n    return url.protocol === 'http:' || url.protocol === 'https:'\n  } catch (_err) {\n    return false\n  }\n}\n\nexport async function promiseSome (arr) {\n  const predicate = (v) => v\n  // Don't mutate arguemnts\n  const arrCopy = arr.slice(0)\n\n  // Wait until we run out of Promises\n  while (arrCopy.length) {\n    // Give all our promises IDs so that we can remove them when they are done\n    const arrWithIDs = arrCopy.map((promise, idx) => {\n      return promise\n        .then(op => ({ idx, result: op[0] && op[0].className && FILTER_LIST.includes(op[0].className) }))\n        .catch(_err => ({ idx, result: false }))\n    })\n\n    // Wait for one of the Promises to resolve\n    const soon = await Promise.race(arrWithIDs)\n\n    // If it passes the test, we're done\n    if (predicate(soon.result)) return true\n\n    // Otherwise, remove that Promise and race again\n    arrCopy.splice(soon.idx, 1)\n  }\n\n  // No Promises passed the test\n  return false\n}\n","/**\n* @license\n* Copyright 2020 Navendu Pottekkat. All Rights Reserved.\n* Licensed under the GNU General Public License v3.0\n* License copy at https://github.com/navendu-pottekkat/nsfw-filter/blob/master/LICENSE\n*\n* =======================================================================================\n*\n* Permissions of this strong copyleft license are conditioned on making\n* available complete source code of licensed works and modifications,\n* which include larger works using a licensed work,\n* under the same license. Copyright and license notices must be preserved.\n* Contributors provide an express grant of patent rights.\n*\n* =======================================================================================\n*/\n\n'use strict'\n\nimport { isValidHttpUrl } from './utils'\n\nfunction clasifyImage (image) {\n  if (!(image.__isNSFW || image.__isChecked)) {\n    if (image.src) {\n      image.style.visibility = 'hidden'\n      analyzeImage(image)\n      image.__isChecked = true\n    }\n  }\n}\n\n// Calls the background script passing it the image URL\nfunction analyzeImage (image) {\n  console.log('analyze image %s', image.src)\n\n  // raw image has invalid url with slashes, for google images case\n  if (image.src.match(/\\/\\/\\/\\/\\//)) {\n    clearTimeout(image.__fullRawImageTimer)\n    image.__fullRawImageTimer = setTimeout(() => analyzeImage(image), 100)\n  } else {\n    const message = { srcUrl: image.src }\n    if (Object.values(image.dataset).length) {\n      message.lazyUrls = Object.values(image.dataset).map(url => {\n        if (url && url.length > 5) {\n          return isValidHttpUrl(url) ? url : `${window.location.origin}${url}`\n        }\n      }).filter(Boolean)\n    }\n\n    chrome.runtime.sendMessage(message, response => {\n      // In case of background worker not alive yet\n      if (chrome.runtime.lastError) {\n        console.log(`Cannot connect to background worker for ${image.src} image, attempt ${image.__reconectCount}`)\n        image.__reconectCount++\n        clearTimeout(image.__reconectTimer)\n        image.__reconectTimer = setTimeout(() => analyzeImage(image), 100)\n      } else {\n        console.log(`Prediction result is ${response ? response.result : 'undefined'} for image ${response.url ? response.url : 'undefined'}, error: ${response.err ? response.err : 'none'}`)\n        if (response && response.result === false) {\n          image.style.visibility = 'visible'\n        } else {\n          image.__isNSFW = true\n        }\n      }\n    })\n  }\n}\n\nfunction callback (mutationsList, __observer) {\n  for (const mutation of mutationsList) {\n    if (mutation.target.tagName === 'IMG') {\n      clasifyImage(mutation.target)\n    }\n\n    const images = mutation.target.getElementsByTagName('img')\n    if (images.length) {\n      for (let i = 0; i < images.length; i++) {\n        clasifyImage(images[i])\n      }\n    }\n  }\n}\nconst observer = new MutationObserver(callback)\n\nif (document.readyState === 'loading') {\n  observer.observe(document, { subtree: true, attributes: true, childList: true })\n}\n"]}